[{"content":"","date":"2025-03-13T21:43:49+08:00","image":"https://majiao2.github.io/2025/%E4%B8%89%E6%9C%88%E6%98%A5%E9%9B%A8%E5%A6%82%E4%B8%9D%E7%BB%87%E6%A2%A6%E6%9D%A5/plum_hu_fc0b0f5b0f3413b8.jpg","permalink":"https://majiao2.github.io/2025/%E4%B8%89%E6%9C%88%E6%98%A5%E9%9B%A8%E5%A6%82%E4%B8%9D%E7%BB%87%E6%A2%A6%E6%9D%A5/","title":"三月|春雨如丝织梦来"},{"content":"","date":"2025-03-13T21:33:19+08:00","image":"https://majiao2.github.io/2025/%E5%95%86%E5%8A%A1%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C-2/%E5%B0%81%E9%9D%A2_hu_94ac6981f0180dde.jpg","permalink":"https://majiao2.github.io/2025/%E5%95%86%E5%8A%A1%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C-2/","title":"商务电信网络 2"},{"content":"1 2 ","date":"2025-03-11T11:34:12+08:00","image":"https://majiao2.github.io/2025/%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%AD%A6/%E5%B0%81%E9%9D%A2_hu_38446184ce5f077b.jpg","permalink":"https://majiao2.github.io/2025/%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80%E5%AD%A6/","title":"市场营销学"},{"content":"Introduction Understand how to represent business processes using the entity-relationship model Implement a database design using MySQL workbench Learn to query a database using SQL Understand new trends and technologies for database Why database? Data stored representations of meaningful objects and events Structured: numbers, text, dates Unstructured: images, video, documents Database Efficient and Consistent Disadvantages of file processing approach Program-Data dependence Duplication of data Limited data sharing Lengthy development times Excessive program maintenance Database approach Database: a shared and integrated collection of inter-related self describing data Relational database: stores data in a structure consisting of one or more tables of rows and columns, which may be interconnected DBMS (Database Management Systems): a software system that enables the use of a database approach. The primary purpose of a DBMS is to provide a systematic method of creating, updating, storing, and retrieving the data stored in a database. A software package that enables users to define, create, maintain, and control access to the database. Database System: a computerized record-keeping system, containing database and DBMS as well as some other components (e.g., hardware) Advantages of database approach Reduce but not eliminate redundancy all data items are integrated with a minimum amount of duplication Sharing of data the database is owned and accessed by the entire organization Data consistency management system reduces the risk of inconsistencies occurring Improved data accessibility due to data integration and query languages like SQL Specific steps Requirements Analysis Collect and analyze the business requirements Conceptual Design Design a conceptual model, e.g., ER model Logical Design Translate the ER model into the relational model Normalization Database Building (Physical Design) Build the database and write application programs Operation, Maintenance, \u0026amp; Tuning Use, maintain, and “tune” the database A good business rule Declarative – what, not how Precise – clear, agreed-upon meaning Atomic – one statement Consistent – internally and externally Expressible – structured, natural language Distinct – non-redundant Business-oriented – understood by business people Data definitions Explanation of a term or fact Term—word or phrase with specific meaning Fact—association between two or more terms Examples of facts: A course is a module of instruction in a particular subject area. A customer may request a model of car from a rental branch on a particular date. Guidelines for good data definition A concise description of essential data meaning Gathered in conjunction with systems requirements Accompanied by diagrams (e.g., E-R diagram) Achieved by consensus, and iteratively refined A good data object name is Related to business, not technical, characteristics Meaningful and self-documenting Unique Readable Composed of words from an approved list Written in standard syntax ER Modeling Part 1 Conceptual Design → Conceptual Model → Concept Business related DBSM-independent Definition of E-R Model A detailed, logical representation of the data for an organization or for a business area. The E-R model is expressed in terms of entities in the business environment, the relationships (or associations) among those entities, and the attributes (or properties) of both the entities and their relationships. An E-R model is normally expressed as an entity-relationship diagram (e-r diagram, or erD), which is a graphical Why E-R model?\nA crucial tool for understanding and communicating complex data structures to both technical and non-technical stakeholders It helps to build a well-organized and efficient database! Entities Requirements: Employees are assigned to projects. For employees we record their employee ID, first name, and last name. For each project we record a project ID and project description. One project must have at least one employee, one employee can be assigned to at most one project. Entities represent real-world objects; things which can be named: Entity type: collection of entities, e.g. employee, customer, sale (often corresponds to a table) Entity” is usually used for “Entity type” Entity instance: person, place, object, event, concept SHOULD BE:\nAn object that will have many instances in the database An object that will be composed of multiple attributes An object that we are trying to model SHOULD NOT BE:\nA user of the database system An output of the database system (e.g., a report) Relationship Description: Relationship type is a set of associations among entity types Each relationship is described by a name Example: Customer Product Customers Buys Product Product is_Purchased_by Customer \u0026ldquo;relationship\u0026rdquo; is usually used for \u0026ldquo;relationship type\u0026rdquo; Symbol: Straight line labeled with the name Cardinality Cardinality Constraints 基数约束 the number of instances of one entity that can or must be associated with each instance of another entity Minimum cardinality If zero, then optional If one or more, then mandatory 强制的 Maximum cardinality The maximum number: one or many Why Cardinality?\nData integrity and constraint enforcement Database and query efficiency Scalability Maximum cardinality One-to-One (1:1) Each entity instance in the relationship will have a maximum of one related entity instance e.g., each student has a student account One-to-Many (1:M) An entity instance on one side of the relationship can have many (more than one) related entity instances, but an entity instance on the other side will have a maximum of one (at most one) related entity instance e.g., each department has many instructors Many-to-Many (M:M) Entity instances on both sides of the relationship can have many related entity instances on the other side e.g., many students take many courses Attribute Description Property or characteristic of an entity type (often corresponds to a field in a table) they will be used for actual communication about the real - world phenomena represented by entities and relationships Symbol: Text inside the associated entity rectangle Classifications of attributes Required versus Optional Attributes Simple versus Composite Attributes An attribute broken into component parts Composite key attribute Single-Valued { } ersus Multivalued Attribute [ ] Stored versus Derived Attributes 存储属性与派生属性 Identifier Attributes Keys Identifier 标识符 An attribute (or combination of attributes) that uniquely identifies individual instances of an entity type Will not change in value Will not be null No intelligent identifiers (e.g., containing locations or people that might change) Substitute new, simple keys for long, composite keys Candidate key 候选键 All available unique, required identifiers to an entity Primary key 主键 The best one among the candidate key ER Modeling Part 2 Modeling relationship Relationship Types vs. Relationship Instances The relationship type is modeled as lines between entity types The relationship instance is between specific entity instances Two entities can have more than one type of relationship between them (multiple relationships) Degree of relationships: the number of entity types that participate in it Relationships can have attributes Associative Entity – combination of relationship and entity Degree of relationships Degree of a relationship is the number of entity types that participate in it Unary relationship Binary relationship Ternary relationship Attributes on relationships Attributes\nCan be associated with entities Can also be assigned to relationships A binary relationship with an attribute\nHere, the date completed attribute pertains specifically to the employee’s completion of a course It is an attribute of the relationship An associative entity\nAssociative entity is like a relationship with an attribute, but it is also considered to be an entity in its own right Note that the many-to-many cardinality between entities has been replaced by two one-to-many relationships with the associative entity Associative entities\nWhen should we use an Associative Entity? All relationships for the associative entity should be many. The associative entity could have meanings independent of the other entities. The associative entity preferably has a unique identifier, and should also have other attributes. The associative entity may participate in other relationships other than the entities of the associated relationship. Supertypes and subtypes Why Super and Subtypes?\nAvoids redundant data\nSupports specialization and generalization\nImproves query efficiency\nA query for all employees can be performed on the employee table, without needing to check each subtype separately Allows for flexible business rules\nE.g., Assistant \u0026amp; Skill Define a subtype (specialization) when:\nThe subtype has additional attributes of interest (e.g., billing rate is recorded for consultants only) and/or The subtype participants in additional relationships Enhanced ER model\nExtends original ER model with new modeling constructs Subtype\nA subgrouping of the entities in an entity type that has attributes distinct from those in other subgrouping Supertype\nA generic entity type that has a relationship with one or more subtypes Attribute inheritance\nSubtype entities inherit values of all attributes of the supertype An instance of a subtype is also an instance of the supertype Attribute inheritance An instance of a subtype is also an instance of the supertype e.g., if ‘Michael’ is in subtype Manager, the data object is also in supertype Employee Subtype entities inherit values of all attributes of the supertype possesses subtype-specific attributes Relationships and subtypes Relationships at the supertype level indicate that ALL subtypes will participate in the relationship The instances of a subtype may participate in a relationship UNIQUE to that subtype. In this situation, the relationship is shown at the subtype level Specialization process Specialization: the process of maximizing the differences between members of an entity by identifying their distinguishing characteristics Specialization is a top-down approach to: Defining a set of supertypes Defining a subtype when It has additional attributes of interest It participates in additional relationships Generalization process Generalization is the reverse of the specialization process 泛化是特化过程的反向操作 Generalization: the process of minimizing the differences between entities by identifying their common characteristics (common attributes and relationships) Generalization is a bottom-up approach to identifying several entities identifying a generalized supertype from these entities Strong vs. Weak entities Strong entities exist independently of other types of entities has its own unique identifier represented with single-line rectangle Weak entities dependent on a strong entity\u0026hellip;cannot exist on its own does not have a unique identifier represented with double-line rectangle Identifying relationship links strong entities to weak entities represented with double line Assignment 1 Exercise 1 3C is a consulting company in Newark. It needs a database to keep track of the assignment of employees to projects. For each employee, 3C wants to record an employee ID (unique for every employee), name, address, and birthday. For each project, 3C wants to record a project ID (unique for each project), project name, and start date. Employees are included in the database even when they have not been assigned to any project. A project must have at least one employee assigned. An employee’s billing rate (the price they charge client for their services) may vary by projects, and 3C wishes to record the applicable billing rate for each employee when assigned to different projects (Hint: Add relationship attributes).\n对于每位employee，3C希望记录 employee ID (unique for every employee), name, address, and birthday 对于每个Project，3C希望记录project ID (unique for each project), project name, and start date 即使员工尚未被分配到任何项目，也会将其纳入数据库 一个项目必须至少分配一名员工 员工的计费费率 employee\u0026rsquo;s billing rate（他们为其服务向客户收取的价格）可能因项目而异 3C 希望记录每个员工在被分配到不同项目时的适用计费费率 Exercise 2 A restaurant is looking to enhance its inventory tracking and optimize sales. One crucial aspect of this system is the relationship between orders and products. Each order has OrderID and Date. Each Product has Product ID and Product Name. The information about a product can be recorded before it is included in any order. The same product can be part of multiple orders. Additionally, some products are composed of multiple other products (e.g., Big Mac Value Meal).\nProduct Big Mac (ProductID: 1003) ProductID Ingredient Quantity Unit 4806 Sesame Seed Bun 1 each 5890 10:1 Patty 2 each 6515 Cheese 2 slice 9875 Dehydrated Onions 1 oz 4050 Lettuce 2 oz 7432 Special Sauce 2 Tbsp 5315 Salt 0.5 Tsp Small Fries (ProductID: 143) ProductID Ingredient Quantity Unit 5315 Salt 0.25 Tsp 7499 Potato 10 oz Small Diet Coke (ProductID: 2499) ProductID Ingredient Quantity Unit 1978 Diet Coke Syrup 0.5 Tsp 1277 Water 12 oz Happy Meal (ProductID: 9444) ProductID Ingredient Quantity Unit 522 Cheeseburger 1 each 143 Small Fries 1 small 2499 Small Diet Coke 1 each Big Mac Value Meal (ProductID: 2911) ProductID Ingredient Quantity Unit 1003 Big Mac 1 each 143 Small Fries 1 each 2499 Small Diet Coke 1 each 每个 Order 都有 OrderID \u0026amp; Date 每个 Product 都有 Product ID \u0026amp; Product Name 产品信息可在其被纳入任何订单之前记录 部分产品由多个其他产品组成 Exercise 3 The 3C company would like to record the information about its employees (either fulltime or part-time) in an enterprise information system. For all employees, they record SSN (unique for each employee), name, address, date-of-birth and degree. They record the salary and date hired for fulltime employees only. Further, the bonus of all managers (who are fulltime employees) has to be recorded. Bonus is not recorded for other fulltime employees (e.g., engineers); for managers only. 3C also records hourly wage for part-time employees. 3C would like to record additional information for interns and custodians (both part-time employees). For interns, the number of hours per week and the manager they work for need to be recorded. An intern is assigned to at least one manager. If an intern works for more than one manager, 3C needs to record how many hours (a week) the intern works for each manager. Not all managers have interns. A few managers have more than one intern. For custodians the shift time need to be recorded.\n所有员工：记录社会安全号码（SSN，每位员工唯一）、姓名、地址、出生日期和学位 全职员工：除上述信息外，还记录工资和雇佣日期。其中，经理（属于全职员工）需额外记录奖金，其他全职员工（如工程师）不记录奖金 兼职员工：记录小时工资。对于实习生和管理员这两类兼职员工，还需记录额外信息 实习生：记录每周工作小时数，以及为之工作的经理。实习生至少被分配给一位经理，若为多位经理工作，需记录为每位经理工作的每周时长。并非所有经理都有实习生，部分经理有多名实习生 管理员：记录轮班时间 Exercise 4 An international school of technology has hired you to create a database management system to assist in scheduling classes. After several interviews with the president, you have come up with the following list of entities, attributes, and initial business rules:\nRoom is identified by BID and Room No and also has a Capacity. A room can be either a lab or a classroom. If it is a classroom, it has an additional attribute called Board Type. Media is identified by MID and has attributes of Media Type and Type Description. Note: Here we are tracking type of media (such as a VCR, projector, etc.), not the individual piece of equipment. Tracking of equipment is outside of the scope of this project. Computer is identified by CID and has attributes Computer Type, Type Description, Disk Capacity, and Processor Speed. Please note: As with Media Type, we are tracking only the type of computer, not an individual computer. You can think of this as a class of computers (e.g., Core™ i7 2.6GHz) Instructor has identifier EID and has attributes Name, Rank, and Office Phone. Course has identifier CourseID (e.g., MIS804) and has attributes Course Description and Credits. Courses can have one, none, or many prerequisites. Courses also have one or more sections. Section has attributes SecID (e.g., 010), Semester, Year, and Enrollment Limit. After some further discussions, you have come up with some additional business rules to help you create the initial design:\nAn instructor teaches one, none, or many sections of a course in a given semester. A room can be scheduled for many sections or no section in a given semester of a given year. However, one section can only be scheduled in one room. A room can have one type of media, several types of media, or no media. Instructors are trained to use one, none, or many types of media. A lab has one or more computer types. However, a classroom does not have any computers. A room cannot be both a classroom and a lab. There also are no other room types to be incorporated into the system. Room: BID \u0026amp; Room No, Capacity lab classroom: Board Type Media: MID, Media Type, Type Description Computer: CID, Computer Type, Type Description, Disk Capacity, Processor Speed Instructor: EID, Name, Rank, and Office Phone Course: CourseID, Course Description, Credits Section: SecID, Semester, Year, and Enrollment Limit Translating ER Model into Relational Model Logical Design How to connect multiple entities?\nHow to ensure data integrity?\nLogical Design Translate the ER model into the relational model Normalization What is logical design?\nLogical database design is about creating stable database structures— correctly expressing the requirements in a technical language. Conceptual data modeling is about understanding the organization—getting the requirements right They show how data is connected and how changes to one area of the system can impact other areas helps ensure data integrity, as it provides a way to ensure data is consistent and accurate across the system We focus on the relational data model based on mathematical theory and therefore has a solid theoretical foundation Relation Definition: A relation is a named, two-dimensional table of data Table consists of rows (records), and columns (attribute or field) Relations (tables) correspond with entity types实体类型 and with relationships types关系类型 Rows correspond with entity instances and with relationship instances Columns correspond with attributes Note: The word relation (in relational database) is NOT the same as the word relationship (in E-R model) Relational Model Step 1: Strong entity and attributes\nStep 2: Binary relationships\nStep 2.1: One-to-many relationships FK on the M-side Primary key on the one side becomes a foreign key on the many side No null value in the foreign key \u0026mdash; this is because of the mandatory minimum cardinality Step 2.2: One-to-one relationships FK on the optional side Step 2.3: Many-to-Many relationships Add a new relation (with PFKs) Step 3: Weak entity\nA separate relation with a foreign key taken from the strong entity A new relation with FK from the strong entity as part of its PK (PFK) Step 4: Unary/recursive relationships 一元/递归关系\nOne-to-many -\u0026gt; one relation with FK\nMany-to-many -\u0026gt; add a new relation (with PFKs)\nStep 5: Multi-valued attributes 多值属性\nMultivalued attribute becomes a separate relation with foreign key A new relation with PFK Step 6: Supertypes and subtypes\nOne relation for supertype and for each subtype Supertype attributes go into supertype relation Subtype attributes go into each subtype; primary key of supertype relation also becomes primary key of subtype relation 1:1 relationship established between supertype and each subtype, with supertype as primary table PFK in each subtype Integrity Constraints Entity Integrity No primary key attribute may be null. All primary key fields MUST have data Referential Integrity Any foreign key value MUST match a primary key value (or the foreign key can be null) e.g. Delete Rules Restrict – don’t allow delete of “customer” side if related rows exist in “order” side Cascade – automatically delete “order” side rows that correspond with the “customer” side row to be deleted Set-to-Null – set the foreign key in the dependent side to null if deleting from the “customer” side → not allowed for weak entities Many-to-many(M:N) Highlights Always adding another relation (table/associative entity) to convert a M:N relationship to two 1:M relationships MySQL workbench will automatically generate a new table if you choose M:N relationship between two tables! Be careful about the changes in Cardinalities M:N -\u0026gt; 1:M The minimum cardinalities need to be adjusted accordingly – Swap Identifying vs Non-identifying relationship Identifying relationship - where the child entity\u0026rsquo;s identity/existence relies solely on the parent entity. No parent entity means no child entity For an identifying relationship, you put the primary key column from the parent into the primary key column of the child (along with other columns needed to provide uniqueness) For a non-identifying relationship, you put the primary key column of the parent into the table of the child, but not in the primary key Normalization Logical Design Translate the ER model into the relational model Normalization Normalization in database design Normalization Process for evaluating and correcting table structures to minimize data redundancies and ensure data integrity Works through a series of stages called normal forms Normal form Second normal form Third normal form 2 NF is better than 1 NF; 3 NF is better than 2 NF For most business database design purpose, 3 NF is the highest we need to go in the normalization process Highest level of normalization is not always most desirable Different normal forms Conversion to first normal form First Normal Form (1NF) Each row has a PK value Every column should have single values No repeating groups (columns) Anomalies 异常 Anomalies are issues caused by redundant data Insertion annomalies Modification anomalies Deletion anomalies Functional dependency (FD) 函数依赖\nThe value of one attribute (the determinant: e.g., A ) determines the value of another attribute (e.g., B) (denoted A -\u0026gt; B)\nWe should identify functional dependencies that hold for all possible values relation NF Problem – Partial dependencies\n1 NF tables are still subject to data redundancies -\u0026gt; anomalies Partial dependencies: Only part of the PK can determine some non-primary key attributes some non-primary key attributes are functionally dependent on only part of the PK Transformation between normal forms Convert 1NF to 2NF Second Normal Form (2NF): every non-PK attribute is fully functionally dependent on the PK\nA relation with a single attribute PK is automatically in 2 NF Step1: Identify all dependencies\nFDs (from business rules): courseNo, sectionNo → title, units, deptCode, instructorID, fName, lName courseNo → title, units, deptCode instructorID → fName, lName FD diagram Depicts all dependencies found within a given table structure Helpful in getting bird’s-eye view of all relationships among a table’s attributes Step2: Remove partial dependency\nWrite the determinant of the partial dependency the key of a new relation Place the dependent attributes on a separate line as in the partial dependency in the new relation along with their determinant Keep the rest of the original relation Convert 2NF to 3NF A table is in third normal form (3NF) if: It is in 2NF and no non-PK attribute is transitively dependent on the PK Step 1: Identify transitive dependencies For every transitive dependency, write its determinant Step 2: Remove transitive dependencies as a PK for a new table Place the dependent attributes in the transitive dependency in the new table identified in step1 Keep the rest of the other tables Normalization and database design Normalization should be part of the design process\nMake sure that proposed entities meet required normal form before table structures are created\nMany real-world databases have been improperly designed or burdened with anomalies if improperly modified during course of time\nYou may be asked to redesign and modify existing databases\nE-R diagram\nProvides the big picture, or macro view, of an organization’s data requirements and operations Created through an iterative process\nIdentifying relevant entities, their attributes and their relationship Use results to identify additional entities and attributes Normalization procedures\nFocus on the characteristics of specific entities A micro view of the entities within the ER diagram Difficult to separate normalization process from ER modeling process\nTwo techniques should be used concurrently\nSummary Normalization is a table design technique aimed at minimizing data redundancies First three normal forms (1NF, 2NF, and 3NF) are most commonly encountered Normalization is an important part—but only a part—of the design process Continue the iterative ER process until all entities and their attributes are defined and all equivalent tables are in 3NF Assignment 2 Exercise 1 Logical Data Model Exercise 2 Logical Data Model Exercise 3 Logical Data Model Exercise 4 Logical Data Model ","date":"2025-03-10T15:56:56+08:00","image":"https://majiao2.github.io/2025/%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%BB%BA%E6%A8%A1/title_hu_e240d0350799f182.jpg","permalink":"https://majiao2.github.io/2025/%E5%AE%9E%E4%BD%93%E5%85%B3%E7%B3%BB%E5%BB%BA%E6%A8%A1/","title":"实体关系建模"},{"content":"\nNetworking Fundamentals Network \u0026amp; Internet A network of network 🔢 roughly hierarchical at center: \u0026ldquo;tier-1\u0026rdquo; ISPs 🌟 Verizon, CenturyLink, AT\u0026amp;T 📡 national/international coverage 🌎 Interconnected by routers通过路由器互相连接 🔄 Tier-1 providers interconnect (peer) privately 对等互联 🔒 Tier-1 providers also interconnect at public network access points (NAPs) 公共网络接入点 📍 \u0026ldquo;Tier-2\u0026rdquo; ISPs: smaller (often regional) 🌍 Comcast 🖥️ Connect to one or more tier-1 ISPs, possibly other tier-2 ISPs 🔌 Tier-2 ISP pays tier-1 ISP for connectivity to rest of Internet 💸 Tier-2 ISP is customer of tier-1 provider. 🧑‍💻 Tier-2 ISPs also peer privately with each other, interconnect at NAP 🔐 \u0026ldquo;Tier-3\u0026rdquo; ISPs and local ISPs 📶 last hop (\u0026ldquo;access\u0026rdquo;) network (closest to end systems) 📍 Local and tier-3 ISPs are customers of higher tier ISPs connecting them to rest of Internet 🛠️ local ISP → Tier 3 ISP → Tier-2 ISP → Tier 1 ISP → Tier 1 ISP → Tier-2 ISP → local ISP 🔄\nNetwork Performance Metrics Bandwidth (capacity) / Throughput 吞吐量 (actual) data transmitted per time unit ⏱️ Notation: bps = bits per second ⚡ Network speed test 🖥️ Latency (delay) 时延 time to send message from point A to point B 🛣️ one-way versus round-trip time (RTT) 🔄 $$Latency = Propagation + Transmit + Queue$$ $$Propagation = \\frac{Distance}{propagation\\ speed\\ in\\ medium (\\sim 2\\times10^{8}\\ m/sec)}$$ $$Transmit = \\frac{Size}{Bandwidth}$$ Availability Percent of time the network is available to users for transmission and reception ⏲️ Want 24x7x365 availability 🕓 Telephone network: Five 9s (99.999%) 📞 Error Rate Percent of lost or damaged messages or bits 🛑 Network Structural Models Client/Server 客户机/服务器模式\nserver: always-on host 始终处于运行状态的主机 permanent IP address 固定的 IP 地址 server farms for scaling 用于扩展规模的服务器集群 clients: communicate with server 与服务器进行通信 may be intermittently connected 可能是间歇性连接 may have dynamic IP addresses do not communicate directly with each other Peer-to-Peer 对等网络模式\nno alwaye-on server 不存在始终在线的服务器 arbitrary end systems directly communicate peers are intermittently connected and change IP addresses Example : Gnutella Blockchain! Highly scalable but difficult to manage 可扩展性极强，但难以管理 Hybrid of Client-Server and P2P Instant messaging / Skype Client-client connection is direct (not through server) Presence detection/location centralized: User registers its IP address with central server when it comes online. User contacts central server to find IP addresses of buddies. The clients and Cloud Computing The thin client has a limited processing power, memory or storage ⚙️ Applications run on the web, in a \u0026ldquo;cloud\u0026rdquo; ☁️ Amazon offers basic services: storage, basic computing elements 🔑 Google offers more advanced services: word processors, spreadsheets 📝 IBM offers Blue Cloud ☁️ Protocols Conventions and rules governing this interaction are specified by the Layer N Protocol A protocol is an agreement about how communications are to proceed 📜 Without a protocol communication can be difficult or even impossible 🚫 Telephone conversation, Postal addresses 📞✉️ Division of Protocols Connection-Oriented 面向连接的 🔗 a logical connection be established between two devices before transferring data 🔄 a circuit is not a prerequisite for a connection ⚡ Circuit-switched =\u0026gt; connection-oriented, but not all connection-oriented =\u0026gt; circuit switching 🛠️ Connectionless 🚫 do not establish a connection between devices 🔓 Packet Switching 分组交换 Break message into smaller packets (or frames) 📬 Route packets individually; Packet switches along the way make decisions about the packet 🔄 Netwrok Architecture - A Layered Model Needs for A Layered Model Task broken into subtasks 🛠️ Implemented separately in layers in stack Each layer provides a service to the layer above ⬆️ Each layer hides details of how the service is provided from the layer above 🕵️‍♂️ Functions needed in both systems 🔄 The Nth layer on one machine \u0026ldquo;talks to\u0026rdquo; or interacts with the Nth layer on another machine 📡 Protocols and Network Architecture Encapsulation 📨 Addition of Control Information to Data Address Information 📍 Error-detecting Code 🔍 Protocol Control 🛡️\n$$ \\text{N-layer PDU (Protocol Data Unit)} = \\text{Header} + \\text{(N+1)-layer PDU} + \\text{Trailer} $$ Network Architecture The set of protocols and layers together make up the Network Architecture 🌐 A Network Architecture Specification must provide enough information to allow implementation in hardware/software 💻 Implementation specific details are not part of the architecture and should be irrelevant for inter-operation 🔒 With one protocol per layer we have a Protocol Stack 🏗️ Standardized Network Architectures Required for devices to communicate 🗣️ Vendors have more marketable products 💼 Customers can insist on standards based equipment 📊 Two standards: OSI Reference model Never lived up to early promises ❌ TCP/IP protocol suite Most widely used 🌍 De facto ✅ Standards OSI Open Systems Interconnection Developed by the International Organization for Standardization (ISO) 🌍 Seven Layers 7️⃣ A Theoretical System Delivered Too Late! 🕰️ TCP/IP Is the De Facto Standard 🏆 OSI Layers Application \u0026mdash;\u0026mdash;\u0026mdash; Acronyms 📖 Presentation \u0026mdash;\u0026mdash; Pointless ❓ Session \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Students 👩‍🏫 Transport \u0026mdash;\u0026mdash;\u0026mdash; Teach 🚚 Network \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Not 🚫 Data Link \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Do 💡 Physical \u0026mdash;\u0026mdash;\u0026mdash;\u0026mdash; Please 🙏 OSI Layers (1) Physical Physical Interface Between Devices ⚙️ Mechanical – hardware, topology 🏗️ Electrical - signaling ⚡ Data Link Activating, Maintaining and Deactivating a Reliable Link – between local devices 🔗 Media access control 🛂 Error Detection and Control 🛑 Higher Layers May Assume Error Free Transmission ✨ OSI Layers (2) Network Delivery of Information 📦 logical addressing 🏷️ routing 🛣️ Fragmentation and assembly 🔨 Error handling ❌ Not Needed on Direct Links 🚫 Transport Reliability control between End Systems (hosts, computers) 💻 In Sequence 🔢 In good flow 🌊 Error Free 🆓 No Losses 🛑 No Duplicates 🔁 OSI Layers (3) Session Control of Dialogues Between Processes 💬 Establish, manage, and terminate dialogues 🛠️ Presentation Data Formats and Coding 📊 Data Compression 📉 Encryption 🔒 Application Implement user required functionalities 🧑‍💻 Send letters, move files 📧 The OSI Environment Communications Path 🛤️ point-to-point link ↔️ network 🌐 TCP / IP TCP/IP is an Internet Model 🌍 TCP = Transmission Control Protocol 🔄 IP = Internet Protocol 🌐 This model has only 4-layers 4️⃣ It is simpler and more practical than the 7-layered OSI-Model 🧠 Created by the US Dept of Defense (DoD) 🏛️ TCP/IP Model Application Layer Combines all the application-related issues into 1 layer 🔗 Includes the Sessions/Presentation layers 💬 Transport Layer Deals with the QoS and other issues like Reliability, flow control and error correction ⚖️ Internet Layer Delivery 📦 Routing 🛣️ Network Interface Layer Ensures the physical links 🔌 Hybrid Most layers need Message segmentation and aggregation 消息分段和聚合 🧩 Some form of Addressing to identify senders and receivers of messages 识别 🏷️ Multiplexing/Demultiplexing of multiple message streams to optimize channels 服用/解复用，优化信道 🔄 Flow control (fast sender vs. slow receiver) 流量控制 🌊 Error controls (detection and correction) 错误控制 🛠️ A set of rules for data exchange 数据交换 📜 Routing of messages when there may be several physical paths 路由选择 🛣️ RDMA (Remote Direct Memory Access) TCP/IP suffers from two major problems: consumes significant CPU cycles and memory resources ⚙️ has large end-to-end latency 🕰️ RDMA copies data directly between virtual memory buffers on two different machines 🔀 lower latency, higher throughput, and smaller CPU footprint ⚡ used in data centers 🏢 Application Layer Protocols - DNS Application Architectures Application Communicating, distributed processes 进行通讯的分布式进程 Running in network hosts in \u0026ldquo;user space\u0026rdquo; 运行在网络主机的 “用户空间” 中 Exchange messages email, file transfer, the Web Application-layer protocols Define messages exchanged by apps and actions taken 定义应用程序之间交换的消息以及所采取的操作 User services provided by lower layer protocols 由下层协议提供的用户服务 DNS Domain Name System\nProblem - how to map host names to IP addresses?\nDNS a hierarchical, domain-based naming scheme and a distributed database system for implementing this naming scheme application-layer protocol 应用层协议 host主机, routers路由器, name servers域名服务器 to communicate to resolve names (address/name translation) Why not centralize DNS?\nSingle point of failure 单点故障 Traffic volume 通信流量过大 Distant centralized database 集中式数据库距离过远 Maintenance doesn’t scale! Root name server Top-level Domain (TLD) server Authoritative name server Root name servers contacted by local name server that can not resolve name root name server contacts authoritative name server if name mapping not known gets mapping returns mapping to local name server 13 root name servers worldwide TLD and Authoritative Servers Top-level domain (TLD) servers: responsible for com, org, net, edu, etc, and all top-level country domains uk, fr, ca, jp. Network solutions maintains servers for com TLD. Educause for edu TLD. Authoritative DNS servers: organization’s DNS servers, providing authoritative hostname主机名 to IP mappings for organization’s servers (e.g., Web and mail). Can be maintained by organization or service provider. Local Name Server Does not strictly belong to hierarchy Each ISP (residential ISP Internet Service Provider, company, university) has one. Also called \u0026ldquo;default name server\u0026rdquo; When a host makes a DNS query, query is sent to its local DNS server Acts as a proxy, forwards query into hierarchy 将查询请求转发到（DNS 的）层级结构体系中 1 nslookup Applicaiton Layer Protocols - Email What happens when you hit SEND on your Email?\nThree major components User Agents \u0026ldquo;mail reader\u0026rdquo; composing, editing, reading mail messages outlook outgoing, incoming messages stored on server Mail Servers mailbox contains incoming messages for user message queue of outgoing (to be sent) mail messages SMTP protocol between mail servers to send email messages client: sending mail server \u0026ldquo;server\u0026rdquo;: receiving mail server Simple Mail Transfer Protocol: SMTP Email: SMTP [RFC 821] Request for Comments\nuses TCP to reliably transfer email message from client to server, port 25 (587) direct transfer: sending server to receiving server three phases of transfer handshaking (greeting) transfer of messages closure command/response interaction commands: ASCII text response: status code and phrase Command Description HELO, EHLO Identifies the client to the server MAIL Initiates a mail transaction. Includes sender’s email address RCPT Specifies an individual recipient’s email address. May be used multiple times to specify multiple recipients. DATA Initiates transfer of mail contents RSET Resets/aborts the current mail transaction VRFY, EXPN Verifies the authenticity of an email address HELP Asks the server to send helpful information to the client NOOP No operation. Do nothing QUIT Instructs the server to terminate the connection Reply Code Description 220 Sent by the server upon acceptance of the initial client connection. 250 Sent after successful completion of a command 354 Send after acceptance of the DATA command to instruct the client to send the email content 221 Sent by the server before it terminates the connection Interactions in SMTP - 1 1 telnet owa.win.udel.edu 25 Actor Command Comment Receiving SMTP Process 220 reply When a TCP connection is opened, the receiver signals that it is ready. Sending SMTP Process HELO cnn.com Sender asks to begin Sending a message. Gives own identity. Receiver 250 reply Receiver signals that it is ready to begin Receiving a message. 想象你给朋友打电话，电话接通了（对应 TCP 连接建立） ，朋友说 “我在听啦，你讲吧”（对应接收 SMTP 进程发送 220 回复），这就是接收方表示自己准备好接收信息啦。\n记忆点：“电话接通，对方说准备好” 还是打电话场景，你先跟朋友自报家门 “我是 [你的名字]”（对应发送 SMTP 进程发送 HELO cnn.com ，告知自己身份），然后说 “我有事儿要跟你讲哦”（对应发送方请求开始发送消息）。\n记忆点：“自报家门，说要讲话” 你朋友听到你要讲话后，说 “好呀，你说吧”（对应接收方发送 250 回复），意思就是准备好接收你说的事儿啦（对应接收方准备好接收消息）。\n记忆点：“对方回应，准备倾听” Interactions in SMTP - 2 Actor Command Comment Sender MAIL FROM: aha@cnn.com Sender identifies the sender (mail author, not SMTP process). Receiver 250 OK Accepts author. However, May reject mail from others. Sender RCPT TO: jcao@udel.edu Identifies first mail recipient. Receiver 250 OK Accepts first recipient 第一步: \u0026ldquo;Sender\u0026rdquo;（发送方）发出 \u0026ldquo;MAIL FROM: aha@cnn.com\u0026rdquo; 的指令，就是告诉接收方这封邮件是谁写的（发件人邮箱是 aha@cnn.com ） 第二步: \u0026ldquo;Receiver\u0026rdquo;（接收方）回复 \u0026ldquo;250 OK\u0026rdquo;，意思是接收方认可了这个发件人，但可能不接受其他发件人的邮件 第三步：发送方又发出 \u0026ldquo;RCPT TO: jcao@udel.edu\u0026rdquo; 的指令，表明这封邮件第一个收件人的邮箱是 jcao@udel.edu 第四步：接收方再次回复 \u0026ldquo;250 OK\u0026rdquo;，表示接受这个收件人 Interactionis in SMTP - 3 Actor Command Comment Sender DATA Receiver 354 Enter mail, end with \".\" on a line by itself Sender Blah blah blah ...\n. Receiver 250 Message accepted for delivery 准备发送内容：发送方（Sender）发出 \u0026ldquo;DATA\u0026rdquo; 指令，告诉接收方要开始发送邮件内容了 接收方指示：接收方（Receiver）回复 \u0026ldquo;354 Enter mail, end with \u0026ldquo;.\u0026rdquo; on a line by itself\u0026rdquo;，意思是让发送方开始输入邮件内容，并且要以单独一行的点（.）作为内容结束的标志 发送实际内容：发送方开始发送具体的邮件内容，这里用 \u0026ldquo;Blah blah blah \u0026hellip;\u0026rdquo; 代表内容，然后用单独的一个点（.）表明内容发送完毕 接收确认：接收方返回 \u0026ldquo;250 Message accepted for delivery\u0026rdquo;，表示已经成功接收邮件内容，会进行后续的投递操作 Interactions in SMTP - 4 Actor Command Comment Sender QUIT Receiver 221 md1.nss.udel.edu closing connection - 发送方（Sender）发出 \"QUIT\" 指令，表示要结束与接收方的连接 - 接收方（Receiver）回复 \"221 md1.nss.udel.edu closing connection\"，说明接收方准备关闭连接，\"md1.nss.udel.edu\" 是接收方服务器标识 SMTP Security Issues No authentication：无身份验证 Spamming：垃圾邮件发送 Unauthorized use of relaying, DoS：未经授权使用邮件中继、拒绝服务攻击 All communication done in plaintext：所有通信均以明文形式进行 Eavesdropping：窃听 Man in the middle attacks：中间人攻击 SMTP-AUTH An extension that adds access control to SMTP.\nAllows the server to provide features only to known users and limit others.\nThe default port for SMTP AUTH is 587.\nVarious authentication methods can be used, such as PLAIN, LOGIN, CRAM - MD5, etc.\nEncryption is highly recommended. 强烈建议使用加密功能\nPLAIN\nThe username and password are transmitted as one string encoded in Base64. LOGIN\nThe username and password are encoded in Base64 and transmitted one by one, first the username and then the password. CRAM - MD5\nThe server requests the client to solve a computational challenge using the password. The client\u0026rsquo;s response is a string containing a username and a 16 - byte digest in hexadecimal notation. This string is BASE64 - encoded. Mail message format SMTP [RFC 821]: protocol for exchanging email message\nRFC 822: standard for text message\nheader lines\nTo: From: Subject: different from SMTP commands\nbody\nthe \u0026ldquo;message\u0026rdquo;, ASCII characters only MIME: multimedia mail extension, RFC 2045, 2056\nadditional lines in message header declare MIME content type Scenario: Alice sends message to Bob Alice uses her User Agent (UA) to compose a message and sets the \u0026ldquo;to\u0026rdquo; field as \u0026ldquo;bob@someschool.edu\u0026rdquo;. Alice\u0026rsquo;s UA sends the message to her mail server, and the message is placed in the message queue. The client - side of SMTP opens a TCP connection with Bob\u0026rsquo;s mail server. - User Agent - Mail Server The SMTP client sends Alice\u0026rsquo;s message over the TCP connection. Bob\u0026rsquo;s mail server places the message in Bob\u0026rsquo;s mailbox. Bob invokes his User Agent to read the message. SMTP (Simple Mail Transfer Protocol) deliver and store emails to the recipient\u0026rsquo;s server. Email Access Protocols: retrieval from server POP (Post Office Protocol, based on RFC 1939 standard) authorization process between the user agent and the server to achieve the function of downloading emails. IMAP (Internet Mail Access Protocol, based on RFC 1730 standard) more features (more complex). manipulation of stored msgs on server HTTP Hotmail, Yahoo!Mail POP3 \u0026ldquo;download and delete\u0026rdquo; mode You cannot re-read e mail if you changes client \u0026ldquo;download-and keep\u0026rdquo; mode copies of messages on different clients POP3 is stateless across sessions IMAP Keep all messages in one place: the server. Allow users to organize messages in folders. IMAP maintains the user state across sessions: names of folders and the mappings between message IDs and folders. Application Layer Protocols - HTTP Web and HTTP First, some jargon:\nA web page consists of objects. An object can be an HTML file, a JPEG image, a Java applet, an audio file, etc. A web page consists of a base HTML file which includes several referenced objects. Each object is addressable by a URL. Example URL: HTTP: hypertext transfer protocol\nWeb’s application layer protocol\nclient/server model\nclient: browser that requests, receives, \u0026ldquo;displays\u0026rdquo; Web objects server: Web server sends objects in response to requests HTTP 1.0: RFC 1945\nHTTP 1.1: RFC 2068\nHTTP request message two types of HTTP messages: request, response HTTP request message: ASCII (human-readable format) general format Method types HTTP/1.1 GET POST HEAD PUT uploads file in entity body to path specified in URL field DELETE asks server to leave requested object out of response deletes file specified in the URL field HTTP/1.0 GET, POST, HEAD Uploading from input Post method: Web page often includes form input Input is uploaded to server in entity body URL method: Uses GET method Input is uploaded in URL field of request line HTTP response message In first line in server-\u0026gt;client response message. A few sample codes: 200 OK request succeeded, requested object later in this message 301 Moved Permanently requested object moved, new location specified later in this message (Location:) 400 Bad Request request message not understood by server 404 Not Found requested document not found on this server 505 HTTP Version Not Supported HTTP/2 HTTP/2 specification was published as RFC 7540 in May 2015. HTTP/2 allows the server to \u0026ldquo;push\u0026rdquo; content, that is, to respond with data for more queries than the client requested. Multiplexing of requests, header compression, and prioritization of request. First draft was published in 2020 HTTP/3 First draft was published in 2020 Uses QUIC (Quick UDP Internet Connections) as the transport layer protocol Encrypted connections Like always employing HTTPS in current HTTP 2.0 HTTP/1 to HTTP/2 to HTTP/3 Try out HTTP (client side) Telnet to your favorite Web server: 1 telnet udel.edu 80 Type in a GET HTTP request: 1 2 GET /~jcao/ HTTP/1.1 Host: udel.edu Look at response message sent by HTTP server!\nDownloading a Complex Webpage with Two Graphics Files Transport Layer Protocols - TCP and UDP Sockets and Port Number socket 套接字\nApplication process sends/receives messages to/from its socket socket analogous to door sending process shoves message out door sending process relies on transport infrastructure on other side of door which brings message to socket at receiving process API: (1) choice of transport protocol; (2) ability to fix a few parameters Addressing processes\nidentifier of a process includes both IP addresses and port numbers associated with the process on hosts. Example port numbers: HTTP server: 80 Mail server: 25 to send HTTP message to gaia.cs.umass.edu web server: IP address: 128.119.245.12 Port number: 80 Use of Port Numbers\nWell-known port numbers are 0 to 1023. These are used by popular applications. Servers/daemons usually use well-known ports. Any client can identify the server/service. Registered port numbers (1024 to 49152) used for less central applications. http://www.iana.org/assignments/port-numbers Ephemeral port numbers: 49153 to 65535 Clients usually use dynamic ports. Assigned by the client kernel at run time. Traditionally (including Windows systems) take the range of 1024 through 4999 Socket = IP Address:Port Number Transport Layer Protocols provide logical communication between application processes running on different hosts\ntransport protocols run in end systems\nsender side: breaks app messages into segments, passes to network layer receiver side: reassembles segments into messages, passes to app layer more than one transport protocol available to apps\nInternet: TCP and UDP Transmission Control Protocol (TCP)\nConnection-oriented; reliable, in-order delivery Reliable data transfer Flow control Congestion control User Datagram Protocol (UDP)\nConnectionless – unreliable, unordered delivery TCP: Overview\npoint-to-point\none sender, one receiver reliable, in-order byte stream\nno \u0026ldquo;message boundaries\u0026rdquo; send \u0026amp; receive buffers\nconnection-orinted\nhandshaking (exchange of control msgs) before data exchange flow controlled\nsender will not overwhelm receiver set window size Transmission Control Protocol (TCP) TCP Segment Format 32 bit sequence numbers TCP breaks byte stream from application into segments (limited by Max. Segment Size) Each segment has a sequence number Initial number selected at connection time Subsequent numbers indicate first data byte number in segment Acknowledgetments (ACK)\nACK# indicates next data byte expected\nNext sequence # from the other side Used for Error Control\nEach correct TCP segment is acknowledged, except for pure acknowledgements and resets Sender listens to be sure that each TCP segment is acknowledged If a segment is not acknowledged in a reasonable period of time, the sender resends it TCP Connection Management 3-Way Handshake\nTCP Flow Control Flow Control One TCP process transmits too fast Other TCP process is overwhelmed Receiver must control transmission rate This is flow control TCP segment has a Window Size Tell how many more bytes the sender can send beyond the segment being acknowledged Example TCP segment contained bytes 45-89 Acknowledgement number for TCP segment acknowledging the segment is 90 If Window Size field value is 50, then Sender may send through byte 140 Must then stop unless the window has been extended in another acknowledgement Each Acknowledgement extends the window of bytes that may be sent Called a sliding window protocol User Datagram Protocol (UDP) TCP vs. UDP UDP\nConnectionless and Unreliable Places a Lighter Load on the Network than TCP Useful Where the Loss of an Occasional Application Message is Not a Serious Problem As in Regular Network Status Messages Or Where There is No Time for Retransmission, As in Voice Transmission ","date":"2025-03-08T20:01:36+08:00","image":"https://majiao2.github.io/2025/%E5%95%86%E5%8A%A1%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C-1/network_new_hu_2017edcdd5582bc7.jpg","permalink":"https://majiao2.github.io/2025/%E5%95%86%E5%8A%A1%E7%94%B5%E4%BF%A1%E7%BD%91%E7%BB%9C-1/","title":"商务电信网络 1"},{"content":" Hogo建站记录 从2024年底萌生了建立个人网站的想法，这个想法变久久萦绕在心头，时时想起，去建站吧！\n小红书，微博，豆瓣等等动态网站充满了人们的生活，传统的静态博客网站似乎被人们遗忘在了历史的长河中。那是互联网初始时，人们记录的一种方式。\n可是，当第一次知道可以通过独属于你的一个域名，进入一个完完全全有你搭建的空间，就像一间自己的房间。没错，就是自己的房间。在这里，你是创作者，完完全全拥有这个网站的属地权，拥有绝对的创作自由，在这里会拥有一种奇特的自留地感。不用担心被封号，被禁言，不用担心有一天网站闭站，所有的记录灰飞烟灭。纸张上的文字会被抹去，硬盘里的数据会丢失，当通过域名进入我的网站时，我知道里面的内容会是安全的，不会无故消失。\n一个女人想要写作，必须拥有两样东西，钱和一间只属于自己的房间。\n——弗吉尼亚·伍尔夫《一间只属于自己的房间》\n为何记录 刚上大学，拥有了手机使用权的我迫不及待地探索着这个时代手机的分享功能————朋友圈。我一开始很频繁地发朋友圈，不是因为我有多想记录当下的那一刻，我只是想体验这个功能而已。大量无意义的信息被记录，朋友圈里囤积的不是“时刻”，是电子垃圾。一年后，我对这个功能早已厌倦，碎片化的记录并不能让我回忆起记录的心情，空间，温度，湿度，只是占用了本就不多的内存。\n后来，我接触到了柳比歇夫时间记录法，我开始高强度地记录每时每刻我都做了什么，我把时间都花到哪里，希望时间就此过得慢些，记录着代表着我正在活在这个世界上。一段时间后，我发现我很少会看这些记录，记录仅仅是记录，没有反思，我需要记录一些更由意义的事。当我垂垂老矣时，我需要能发现自己在这世上留下了一些痕迹。\n高中时写作文，写作文的那一个小时可以抽离开来东想西想，不去想高考，刷刷下笔。到了大学，却鲜少拿起笔，但每日还是会新建一个每日笔记的文档，随便写些什么，却也时常忘记整理。每一天似乎都是相似的，记录日期，天气，没了。只有写长文时才能静下来构思。总有写点什么的计划，却总有别的事情挡在前面迟迟无法开始。当有了这间只属于自己的房间，我要一点点地细心地装扮这间属于我的房间。\n我想，记录是对抗死亡的焦虑。这世间大多数事情都没有意义，人生也是，赋予人生意义，被记录就是意义所在，这个记录的人也可以是我自己。\n","date":"2025-03-05T01:01:42+01:00","image":"https://majiao2.github.io/2025/extortion/cabin_hu_b0839814346cffbb.jpg","permalink":"https://majiao2.github.io/2025/extortion/","title":"建站记录"}]